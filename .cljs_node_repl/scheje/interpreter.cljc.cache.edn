;; Analyzed by ClojureScript 1.7.228
{:use-macros {match cljs.core.match}, :excludes #{}, :name scheje.interpreter, :imports nil, :requires {cljs.core.match cljs.core.match, tools scheje.tools, scheje.tools scheje.tools, unifier scheje.unifier, scheje.unifier scheje.unifier, expander scheje.expander, scheje.expander scheje.expander, scheje.library scheje.library}, :uses {root-env scheje.library}, :defs {form-eval {:protocol-inline nil, :meta {:file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :line 93, :column 7, :end-line 93, :end-column 16, :arglists (quote ([exp a]))}, :name scheje.interpreter/form-eval, :variadic false, :file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :end-column 16, :method-params ([exp a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 2, :fn-var true, :arglists (quote ([exp a]))}, eval-prog-with-env! {:protocol-inline nil, :meta {:file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :line 186, :column 7, :end-line 186, :end-column 26, :arglists (quote ([a exprs]))}, :name scheje.interpreter/eval-prog-with-env!, :variadic false, :file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :end-column 26, :method-params ([a exprs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a exprs]))}, form-apply {:protocol-inline nil, :meta {:file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :line 13, :column 7, :end-line 13, :end-column 17, :arglists (quote ([exp a]))}, :name scheje.interpreter/form-apply, :variadic false, :file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :end-column 17, :method-params ([exp a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([exp a]))}, eval-exp-with-env! {:protocol-inline nil, :meta {:file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :line 156, :column 7, :end-line 156, :end-column 25, :arglists (quote ([env exp]))}, :name scheje.interpreter/eval-exp-with-env!, :variadic false, :file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :end-column 25, :method-params ([env exp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env exp]))}, form-eval-quasi {:protocol-inline nil, :meta {:file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :line 73, :column 7, :end-line 73, :end-column 22, :arglists (quote ([exp a]))}, :name scheje.interpreter/form-eval-quasi, :variadic false, :file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :end-column 22, :method-params ([exp a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([exp a]))}, evcon {:protocol-inline nil, :meta {:file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :line 37, :column 7, :end-line 37, :end-column 12, :arglists (quote ([conds a]))}, :name scheje.interpreter/evcon, :variadic false, :file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :end-column 12, :method-params ([conds a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([conds a]))}, sym-set! {:protocol-inline nil, :meta {:file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :line 63, :column 7, :end-line 63, :end-column 15, :arglists (quote ([a sym binding]))}, :name scheje.interpreter/sym-set!, :variadic false, :file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :end-column 15, :method-params ([a sym binding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a sym binding]))}, define {:protocol-inline nil, :meta {:file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :line 55, :column 7, :end-line 55, :end-column 13, :arglists (quote ([a sym binding]))}, :name scheje.interpreter/define, :variadic false, :file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :end-column 13, :method-params ([a sym binding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a sym binding]))}, eval-prog {:name scheje.interpreter/eval-prog, :file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :line 202, :column 1, :end-line 202, :end-column 15, :meta {:file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :line 202, :column 6, :end-line 202, :end-column 15}}, ts {:name scheje.interpreter/ts, :file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :line 9, :column 1, :end-line 9, :end-column 8, :meta {:file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :line 9, :column 6, :end-line 9, :end-column 8}}, evlis {:protocol-inline nil, :meta {:file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :line 43, :column 7, :end-line 43, :end-column 12, :arglists (quote ([exps a]))}, :name scheje.interpreter/evlis, :variadic false, :file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :end-column 12, :method-params ([exps a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([exps a]))}, define-syntax {:protocol-inline nil, :meta {:file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :line 47, :column 7, :end-line 47, :end-column 20, :arglists (quote ([a syn-name literals pattern-rules]))}, :name scheje.interpreter/define-syntax, :variadic false, :file "/home/rafik/work/scheje/src/scheje/interpreter.cljc", :end-column 20, :method-params ([a syn-name literals pattern-rules]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 4, :fn-var true, :arglists (quote ([a syn-name literals pattern-rules]))}}, :require-macros {cljs.core.match cljs.core.match}, :cljs.analyzer/constants {:seen #{:scopes = < atom? :else :literals cons :name <= * unquote-splicing car null? :evals > :env lambda if :rules :sym unquote - :syntax / >= define cond :error cdr set! quasiquote + quote eq? define-syntax display}, :order [:else lambda eq? = null? car cdr cons atom? display + - / * < > <= >= :syntax :name :literals :rules unquote unquote-splicing :scopes :sym :error quasiquote quote cond if define-syntax set! define :evals :env]}, :doc nil}